"""This script plots ALIBAVA files together for files generated by QTC
Data must be """

import logging, os
import holoviews as hv
from holoviews import opts
from scipy.stats import linregress
from copy import deepcopy
import pandas as pd
import numpy as np

from bokeh.models import CustomJS
from bokeh.models.widgets import Button

from forge.tools import customize_plot, holoplot, convert_to_df, config_layout, text_box
from forge.tools import twiny, relabelPlot, applyPlotOptions, rename_columns
from forge.tools import plot_all_measurements, convert_to_EngUnits, plot
from forge.specialPlots import dospecialPlots
from forge.utilities import line_intersection


class Alibava:
    def __init__(self, data, configs):

        self.log = logging.getLogger(__name__)
        self.config = configs
        self.analysisName = "Alibava"
        self.data = convert_to_df(data, abs=self.config.get("abs_value_only", False))
        self.data = rename_columns(
            self.data, self.config[self.analysisName].get("Measurement_aliases", {})
        )
        self.basePlots = None
        self.PlotDict = {
            "Name": "IVCV"
        }  # Name of analysis and cnavas for all plots generated during this analysis
        self.xaxis = "Temperature"
        self.donts = []


    def run(self):
        """Runs the script"""

        # Plot all Measurements
        self.basePlots = plot(
            self.data,
            self.config,
            self.xaxis,
            self.analysisName,
            plot_only=("MPV",),
            do_not_plot=self.donts,
        )
        import pandas as pd
        import hvplot.pandas
        df = pd.DataFrame({
            "30": [25949,		21177,		33],
            "20": [21392,		25618,		2957],
            "10": [30952,		17625,		1410],
            "5": [34443,		16300,		257],
            "0": [34352,		15194,		448],
            "-10": [42386,		7420,		166],
            "-17": [41868,		7723,		168],
            "Clustersize": [3, 4, 5],
        })
        df = df.groupby("Clustersize").mean()
        bars = df.hvplot.bar(x="Clustersize", legend='top_left', y=["-17","-10","0","5","10","20","30"])

        group_specific_order = [3, 4, 5]
        variable_specific_order = ["-17","-10","0","5","10","20","30"]

        # Note that group and Variable are the variable names of your dimensions here
        # when you use this on a different grouped barchart, then please change to the
        # names of your own dimensions.
        bars = bars.redim.values(
            group=group_specific_order,
            Variable=variable_specific_order,
        )

        # CCE measurements
        # Plot all Measurements
        self.basePlots2 = plot(
            self.data,
            self.config,
            "voltage",
            self.analysisName,
            plot_only=("m17d", "m10d", "0d","5d","10d","20d", "30d"),
            do_not_plot=self.donts,
        )

        # self.basePlots = applyPlotOptions(self.basePlots, {'Curve': {'color': "hv.Cycle('PiYG')"}})
        self.PlotDict["BasePlots"] = self.basePlots + self.basePlots2
        self.PlotDict["All"] = self.basePlots + bars.sort().opts(width=1000, height=800) + self.basePlots2

        return self.PlotDict