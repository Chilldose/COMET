"""Simply plots all data as curve plots"""

"""This script plots IVCV files together for files generated by QTC
Data must be """

import logging
import holoviews as hv

hv.extension('bokeh')

from forge.tools import customize_plot, holoplot, convert_to_df, config_layout
from forge.tools import twiny, relabelPlot
from forge.tools import SimplePlot, convert_to_EngUnits
from forge.specialPlots import dospecialPlots
from forge.utilities import line_intersection


class TCAD:

    def __init__(self, data, configs):

        self.log = logging.getLogger(__name__)
        self.data = convert_to_df(data, abs=True)
        self.config = configs
        self.df = []
        self.basePlots = None
        self.analysisname = "TCAD"
        self.PlotDict = {"Name": self.analysisname}
        self.measurements = self.data["columns"]
        hv.renderer('bokeh')

        self.areafactors = self.config["AreaFactors"]
        self.scalefactors = self.config["ScalingFactors"]

        self.to_plot = [("IV", "IV_1", self.areafactors.get("IV", 1), self.scalefactors.get("IV", 1)),
                        ("CV", "CV_1", self.areafactors.get("CV", 1), self.scalefactors.get("CV", 1)),
                        ("1c2", "1c2_1", self.areafactors.get("1c2", 1), self.scalefactors.get("1c2", 1))
                        ]

    def run(self):
        """Runs the script"""

        # Convert the units to the desired ones
        for meas in self.measurements:
            unit = self.config[self.analysisname].get(meas, {}).get("UnitConversion", None)
            if unit:
                self.data = convert_to_EngUnits(self.data, meas, unit)

        # Scale data first
        for plots_data in self.to_plot:
            self.data["All"][plots_data[1]] = self.data["All"][plots_data[1]] * float(plots_data[2]) * float(plots_data[3])  # Take the y axis and multipy area and scaling
            for meas in self.data['keys']:
                self.data[meas]["data"][plots_data[1]] = self.data[meas]["data"][plots_data[1]] * float(plots_data[2]) * float( plots_data[3])  # Take the y axis and multipy area and scaling

        # Plot all Measurements
        self.PlotDict["All"] = None
        for plots_data in self.to_plot:
            if self.PlotDict["All"]:
                self.PlotDict["All"] += SimplePlot(self.data, self.config, plots_data[1], plots_data[0], self.analysisname)
            else:
                self.PlotDict["All"] = SimplePlot(self.data, self.config, plots_data[1], plots_data[0], self.analysisname)

        # Reconfig the plots to be sure
        self.PlotDict["All"] = config_layout(self.PlotDict["All"], **self.config.get(self.analysisname, {}).get("Layout", {}))
        return self.PlotDict
