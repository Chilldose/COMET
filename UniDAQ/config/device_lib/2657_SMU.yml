---
   Device_name: 2657 Keithley SMU
   Display_name: Bias_SMU
   Device_type: SMU
  
   # All set parameters
   set_enable_beeper: beeper.enable = {}
   set_beep: beeper.beep({}, {})
   set_delay: delay({}) # Sets a delay to to following command!
   set_meas_delay: smua.measure.delay = {} # Sets a FIX delay for commands
   set_lock_SMU: display.locallockout = {} 
   set_display_measurement: display.screen = {}
   set_display_text: display.settext({text}) # Can be a list of values
   set_display_func: display.smua.measure.func = {}
   set_lan_autoconnect: lan.autoconnect = {}
   set_DNS: lan.config.dns.address[1] = '0.0.0.0'
   set_domain: lan.config.dns.domain = '0.0.0.0'
   set_hostname: lan.config.dns.hostname = '2657KeithleySMU'
   set_verify_host: lan.config.dns.verify = {}
   set_gateway: lan.config.gateway = {}
   set_ipaddress: lan.config.ipaddress = {}
   set_lan_config: lan.config.method = {}
   set_measure_adc: smua.measure.adc = {}
   set_autorange_current: smua.measure.autorangei = {}
   set_autozero: smua.measure.autozero = {}
   set_autorange_voltage: smua.measure.autorangev = {}
   set_measurement_count: smua.measure.count = {}
   set_current_range_low: smua.measure.lowrangei = {}
   set_voltage_range_low: smua.measure.lowrangev = {}
   set_filter_count: smua.measure.filter.count = {}
   set_NPLC: smua.measure.nplc = {}
   set_source_current_autorange: smua.source.autorangei = {}
   set_source_voltage_autorange: smua.source.autorangev = {}
   set_filter_enable: smua.measure.filter.enable = {}
   set_source_func: smua.source.func = {}
   set_filter: smua.measure.filter.type = {}
   set_voltage: smua.source.levelv = {}
   set_measurement_delay_factor: smua.measure.delayfactor = {} # A factor by which the build in delay is in/decreased 1nA range has a standard delay of 1s!!!
   set_source_level_volts: smua.source.levelv = {}
   set_complience_current: smua.source.limiti = {}
   set_complience: smua.source.limiti = {}
   set_complience_voltage: smua.source.limitv = {}
   set_offvoltage: smua.source.offfunc = {}
   set_offcomplience: smua.source.offlimiti = {}
   set_current_range: smua.measure.rangei = {}
   set_measurement_delay: smua.measure.delay = {}
   set_output: smua.source.output = {}  
   set_queueclear: dataqueue.clear()   
  
  
   # All get parameters
   get_read_voltage: print(smua.measure.v())
   get_read_current: print(smua.measure.i())
   get_read_iv: print(smua.measure.iv())
   get_read: print(smua.measure.iv())
   get_annuciators: print(display.getannuciators())
   get_error_count: print(errorqueue.count)
   get_next_error: errorcode, message, severity = errorqueue.next() \n print(errorcode, message, severity)
  

  # All reset device parameters
   reset:
      - display_func: display.MEASURE_DCAMPS
      - autorange_current: 1
      - autorange_voltage: 1
      - autozero: smua.AUTOZERO_AUTO
      - measurement_count: 1
      - filter_count: 1
      - filter_enable: smua.FILTER_ON
      - filter: smua.FILTER_REPEAT_AVG
      - voltage_range_low: 1
      - current_range_low: 100e-12
      - NPLC: 1 # range from 0.001 to 25
      - source_current_autorange: smua.AUTORANGE_ON
      - source_voltage_autorange: smua.AUTORANGE_ON
      - source_func: smua.OUTPUT_DCVOLTS
      - source_level_volts: 0
      - complience_current: 50e-6
      - complience_voltage: 1000
      - offvoltage: smua.OUTPUT_DCVOLTS
      - offcomplience: 50e-6
      - output: smua.OUTPUT_OFF
      - measurement_delay: smua.DELAY_AUTO
      - measurement_delay_factor: 1.0
      - measure_adc: smua.ADC_INTEGRATE # or smua.ADC_FAST
      - enable_beeper: beeper.ON
      - lan_autoconnect: lan.ENABLE
      - verify_host: lan.ENABLE
      #- gateway: '192.168.0.1'
      #- ipaddress: '192.168.0.100'
      #- lan_config:  lan.MANUAL
      - lock_SMU: display.LOCK
      - display_measurement: display.SMUA
      - meas_delay:  smua.DELAY_AUTO
  
  
   # Misc parameters
   clear_errors: errorqueue.clear()
   exit_script: exit()
   initialize_lan: lan.applysettings()
   reset_lan_interface: lan.reset()
   device_IDN_query: "*IDN?"
   reset_device: ["*rst", "*cls"]
   abort: smua.abort()
   store_calibration: sma.cal.save()
   calibrate_highsense: smuX.contact.calibratehi()
   calibrate_lo: smuX.contact.calibratelo()
   clear_display: display.clear()
   display_clear: display.clear()
   display_dcamps: display.smua.measure.func = display.MEASURE_DCAMPS
   display_dcvolts: display.smua.measure.func = display.MEASURE_DCVOLTS
   display_dcohms: display.smua.measure.func = display.MEASURE_DCOHMS
   display_dcwatts: display.smua.measure.func = display.MEASURE_DCWATTS
   separator: ","


  
  
 

 
